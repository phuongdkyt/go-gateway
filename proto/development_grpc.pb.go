// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/development.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DevelopmentServiceClient is the client API for DevelopmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevelopmentServiceClient interface {
	GenerateSecretKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GenerateSecretKeyResponse, error)
	DecryptSecretSessionId(ctx context.Context, in *DecryptSecretSessionIdRequest, opts ...grpc.CallOption) (*DecryptSecretSessionIdResponse, error)
	EncryptData(ctx context.Context, in *DevEncryptDataRequest, opts ...grpc.CallOption) (*DevEncryptDataResponse, error)
	DecryptData(ctx context.Context, in *DevDecryptDataRequest, opts ...grpc.CallOption) (*DevDecryptDataResponse, error)
	SetSecretSessionTimeout(ctx context.Context, in *SetSecretSessionTimeoutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type developmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDevelopmentServiceClient(cc grpc.ClientConnInterface) DevelopmentServiceClient {
	return &developmentServiceClient{cc}
}

func (c *developmentServiceClient) GenerateSecretKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GenerateSecretKeyResponse, error) {
	out := new(GenerateSecretKeyResponse)
	err := c.cc.Invoke(ctx, "/gateway.DevelopmentService/GenerateSecretKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developmentServiceClient) DecryptSecretSessionId(ctx context.Context, in *DecryptSecretSessionIdRequest, opts ...grpc.CallOption) (*DecryptSecretSessionIdResponse, error) {
	out := new(DecryptSecretSessionIdResponse)
	err := c.cc.Invoke(ctx, "/gateway.DevelopmentService/DecryptSecretSessionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developmentServiceClient) EncryptData(ctx context.Context, in *DevEncryptDataRequest, opts ...grpc.CallOption) (*DevEncryptDataResponse, error) {
	out := new(DevEncryptDataResponse)
	err := c.cc.Invoke(ctx, "/gateway.DevelopmentService/EncryptData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developmentServiceClient) DecryptData(ctx context.Context, in *DevDecryptDataRequest, opts ...grpc.CallOption) (*DevDecryptDataResponse, error) {
	out := new(DevDecryptDataResponse)
	err := c.cc.Invoke(ctx, "/gateway.DevelopmentService/DecryptData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developmentServiceClient) SetSecretSessionTimeout(ctx context.Context, in *SetSecretSessionTimeoutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gateway.DevelopmentService/SetSecretSessionTimeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevelopmentServiceServer is the server API for DevelopmentService service.
// All implementations should embed UnimplementedDevelopmentServiceServer
// for forward compatibility
type DevelopmentServiceServer interface {
	GenerateSecretKey(context.Context, *emptypb.Empty) (*GenerateSecretKeyResponse, error)
	DecryptSecretSessionId(context.Context, *DecryptSecretSessionIdRequest) (*DecryptSecretSessionIdResponse, error)
	EncryptData(context.Context, *DevEncryptDataRequest) (*DevEncryptDataResponse, error)
	DecryptData(context.Context, *DevDecryptDataRequest) (*DevDecryptDataResponse, error)
	SetSecretSessionTimeout(context.Context, *SetSecretSessionTimeoutRequest) (*emptypb.Empty, error)
}

// UnimplementedDevelopmentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDevelopmentServiceServer struct {
}

func (UnimplementedDevelopmentServiceServer) GenerateSecretKey(context.Context, *emptypb.Empty) (*GenerateSecretKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSecretKey not implemented")
}
func (UnimplementedDevelopmentServiceServer) DecryptSecretSessionId(context.Context, *DecryptSecretSessionIdRequest) (*DecryptSecretSessionIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptSecretSessionId not implemented")
}
func (UnimplementedDevelopmentServiceServer) EncryptData(context.Context, *DevEncryptDataRequest) (*DevEncryptDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptData not implemented")
}
func (UnimplementedDevelopmentServiceServer) DecryptData(context.Context, *DevDecryptDataRequest) (*DevDecryptDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptData not implemented")
}
func (UnimplementedDevelopmentServiceServer) SetSecretSessionTimeout(context.Context, *SetSecretSessionTimeoutRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSecretSessionTimeout not implemented")
}

// UnsafeDevelopmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevelopmentServiceServer will
// result in compilation errors.
type UnsafeDevelopmentServiceServer interface {
	mustEmbedUnimplementedDevelopmentServiceServer()
}

func RegisterDevelopmentServiceServer(s grpc.ServiceRegistrar, srv DevelopmentServiceServer) {
	s.RegisterService(&DevelopmentService_ServiceDesc, srv)
}

func _DevelopmentService_GenerateSecretKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevelopmentServiceServer).GenerateSecretKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.DevelopmentService/GenerateSecretKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevelopmentServiceServer).GenerateSecretKey(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevelopmentService_DecryptSecretSessionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptSecretSessionIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevelopmentServiceServer).DecryptSecretSessionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.DevelopmentService/DecryptSecretSessionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevelopmentServiceServer).DecryptSecretSessionId(ctx, req.(*DecryptSecretSessionIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevelopmentService_EncryptData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DevEncryptDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevelopmentServiceServer).EncryptData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.DevelopmentService/EncryptData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevelopmentServiceServer).EncryptData(ctx, req.(*DevEncryptDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevelopmentService_DecryptData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DevDecryptDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevelopmentServiceServer).DecryptData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.DevelopmentService/DecryptData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevelopmentServiceServer).DecryptData(ctx, req.(*DevDecryptDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevelopmentService_SetSecretSessionTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSecretSessionTimeoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevelopmentServiceServer).SetSecretSessionTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.DevelopmentService/SetSecretSessionTimeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevelopmentServiceServer).SetSecretSessionTimeout(ctx, req.(*SetSecretSessionTimeoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DevelopmentService_ServiceDesc is the grpc.ServiceDesc for DevelopmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DevelopmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.DevelopmentService",
	HandlerType: (*DevelopmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateSecretKey",
			Handler:    _DevelopmentService_GenerateSecretKey_Handler,
		},
		{
			MethodName: "DecryptSecretSessionId",
			Handler:    _DevelopmentService_DecryptSecretSessionId_Handler,
		},
		{
			MethodName: "EncryptData",
			Handler:    _DevelopmentService_EncryptData_Handler,
		},
		{
			MethodName: "DecryptData",
			Handler:    _DevelopmentService_DecryptData_Handler,
		},
		{
			MethodName: "SetSecretSessionTimeout",
			Handler:    _DevelopmentService_SetSecretSessionTimeout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/development.proto",
}
